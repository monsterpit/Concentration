{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Access Controls\
\
(You want to be able to protect the Internal implementation of data structures, You do this by marking which API* you want other code to use with certain keywords)\
*i.e. methods and properties\
To protect API from improper use\
\
Swift supports this with following access control keywords\
\
(i)internal :- This is the default \
		It means "usable by any object in my app or framework"\
		Pretty much unlimited scope of access\
\
(ii)private :- this means "only callable from within this object"\
\
(iii)private(set) :- This means "this property is readable outside this object , but not setable"\
		:- only for vars\
		:- setting it is private , by getting it is public\
\
(iv)fileprivate :- accessible by any code in this source file\
		e.g. anything in file example 4 classes in a file can access eachother\
\
\
For frameworks:-\
\
public :- (for framework only) This can be read by objects outside framework\
	can call your framework from app\
\
open :- (for framework only) public and objects outside my framework can subclass this.\
	people can call ,override your methods\
\
A good strategy is to just mark everything private by default\
\
Then remove the private designation when that API is ready to be used by other code\
 \
\
\
\ul API protection that is different from Access control  i.e. assertion\ulnone \
\
Assertion\
is something we assert something to be true if it's not the program crashes and prints out errors\
\

\b when you put it your code assert's are ignored when shipped to the APPStore}