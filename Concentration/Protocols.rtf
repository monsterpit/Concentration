{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Protocols(IS a TYPE)\
It can be used almost anywhere any other type is used : vars,function parameters,etc.\
\
A type which is a declaration of functionality only\
No data storage of any kind (so it doesnt make sense to say its a "value" or "reference" type)\
Essentially provides multiple inheritance (of functionality only, not storage) in swift\
\
\
Protocol is the way for a caller to call an API with anything they want any class,struct,enum they can pass they want in and at the same time receiving method can specify what it really want\
So both side get to do what they want \
receiving thing gets what it wants the thing you are passing to do and thing passing in can pass whatever it wants as long as it does that thing\
\
Protocols are list of vars and methods\
\
What are protocols good for?\
Making API more flexible and expressive\
Blind,Structured communication between View and controller(delegation)\
Mandating behavior(e.g. the keys of a Dictionary must be hashable)\
Sharing functionality in disparate types(String ,Array,CountableRange are all collections)\
Multiple inheritance (of functionality, not data)\
\
There are 3 aspects to a protocol\
1.the protocol declaration(which properties and methods are in the protocol)\
2.a class, struct, or enum declaration that makes the claim to implement the protocol\
3. the code in said class, struct or enum (or extension) that implements the protocol\
\
In swift you have to implement all methods/properties in protocol \
But in objective C protocols had optional methods\
any protocol that has optional methods must be marked @objc\
Any class that implements an optional protocol must inherit from NSObject\
These sorts of protocols are used often in iOS for delegation \
Except for delegation , a protocol with optional methods is rarely (if ever) used.\
As you can tell from @objc designation it's mostly for backwards compatibility\
\
\
\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
}